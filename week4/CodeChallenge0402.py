# GibbsSampler
import random
k = int(input("Enter k: "))
t = int(input("Enter t: "))
N = int(input("Enter N: "))
Dna1 = ["GGGACCCACTAAGAGTCCTCCTTATGCGATACGACAGAGTGCGGCCCACACAGTGTAATCCTCAATGGACACGCTGAGTCAACGATGTGAGTACGGTAGGCGATGATGCGTCGTAAGGCATGCACTGGTATCCCCGCGTGCCAATGTGCACGTCTTACTCCAGTCGCTTCATTTCCTGCAAATAGACGTCCTGCATCACTGCTGTCCCCTGACTCGACGGACCTCCTATATTCCTTTAAGGGTGTTGACAATATGATGAGGCCACGCAGGCCTTGGGGCAGAATCTCTTCGCCCATCGTGGTTGGGGACCCACTAAGAG",

"TCCTCCTTATGCGATACGACAGAGTGCGGCCCACACAGTGTAATCCTCAATGGACACGCTGAGTCAACGATGTGAGTACGGTAGGCGATGATGCGTCGTAAGGCATGCACTGGTATCCCCGCGTGCCAATGTGCACGTCTTACTCCAGTCGCTTCATTTCCTGCAAATAGACGTCCTGCATCACTGCTGTCCCCTGGATTTATTTGTGGAGACTCGACGGACCTCCTATATTCCTTTAAGGGTGTTGACAATATGATGAGGCCACGCAGGCCTTGGGGCAGAATCTCTTCGCCCATCGTGGTTGGGGACCCACTAAGAG",

"ACTCAACTGAATTCGCGACGACGTTCGACCTAATTTACGGGCGGACCAATTCTGACATAATCACGAGCTTGAGGCTTTTTCTTCAGTGCGCTGTCGTCCATCGTTACTTGAGCCCGGGAGGCGTTTATTGGTTATTAAGCTCAGGATCGTAATGTGGAGCTCGTACCAATTATTGTGGTTACTCTGAATGCATATTACCCAAGCGATGACCGACGGGTCTCAATGCATAGTAACTGCCCCCCATCAAGATTGTGCATGGTTACACTTCAGAAGGCCCTTATAAGGAACGGCTATCAAAGTTTCCGTAACCGTGAGGAAT",

"AGGTATTAAGTGGAAAGACACACCGTACCAGTCAATGATTTTCAACTTGCGACAATTAGACATATTCGATATAGCCTGGTCCCGGCGCGACAACGGCATTACTTTAGACCCCCTTGCCCCATAGATCCTGGCATATGCGATTGTTGTCTGGGATTAGACCAACTGCTTGGCCATATGATCAGTTAAATGCGACCTCTCCCGATGACGGGATCGGTTGTAGGAGTTGACGAAAGACCATCTAAGCAGGTACAGCTAGCTCGTCTGACAATTGTGTATCAGCTTTTGAAGCGATTAAGCCCTTGACAAATGACGCTAGAAT",

"TTGAACCGCGGCTCCGCATTGTGCTACCTATTCGTGAATATTCATGGGCCTCAACTTATGACTGGTTAGATGTAAGGTTTGTCGGTATGGGGGTTGAACAAATGAATGAAGTTCAAATCCAAACGAGGGTCTTCCAAGCCTCTCCTTAGATCCCGTAATCTACCGGGTAGTGGTCAGGTTCGAGTCTCGCCCCGGCCAGTAATAGCAAGGCTTGTCCTCACCTCTTGGTGCAGCATTGTGTGCGACCGGTGTTTATAATGGTCCGGCGTGATCGGTTTGTGCCACGACGAATGCTAGCCCCCCGACGTTCTAGGGATCG",

"CCGAACCTTCGGCATACACTATGGGACATAGAAAGGAGCGACCGGTCTTAAAAACGTTTTAGGAGATATATTTGTGGAGGTTCCTGAGGGAACCCCAGTTGTGAGTCTTCCTCAAGAGGGTTGCTGGATATCGCGAAACATGTTGATTGCAAACGTGGGATATCTCGACAACGATACTATGTGGATCCCTTGTATTCGCAATGCCCTAAAGCAGTAAATCTCAGTGTTTAATCGAAAGATTTGAGCTCCTTCACATAATGTACGGCTGTAGCTCTTTTCAGACCGGGTATCACGTCGTCGAGCCAGATGCTAACGCTGA",

"TCCGCTGCCACTTGCCCACCATCCACGCCGGACTCCTGCGCACAGGACAGCCCGCGTTTCTAAGTAAAAATTCTGATCGGTTTGTACCGTGTAGCATGTTATTAAACCCCGCTGGTGGTGCATACCAAACGTCACGTGGGCGGCAGGGGGACACTTTAGACTTAAACGTCACCTCTAGGCCGGCTTAGGCGGACGTGTCATAGAATGCGACTAGGGTACTGATGTGCATTTGGAGGCAACCTTAAGCTTGCGTGTATACGGGGTTCATTACGACGATTAGATCACCTGCTTACATACGACGCAATGCGTGCATACTTGG",

"AAATTCATCTATCCCGCGCCCGCTGGCATTAGAATGCCCAGGCTCACTCCGGATGTTAAATCTGGTGGTGAATACCCACAAGCAGAATACAAAGTGTGGGCGGCGCGCGCGTCTGAGCCATCAAATACGCTACTAATTACCTTCCAACGATACACTTTTGGCTTATCCCTAACGTCATGCGTCATCCGTGCGATCTAGATCGGTCGATGGAGACCTTCTAGCCACAGTGATCCTTTGGACGAATACTCCTATTGTGCCACGCCTACTCGCTATGATCTCAATAAGACTGGGTCGAAAGGGATAATCGGCGAGCGACTCA",

"GGCCGCAATACCCATTACTCTGCTAGCTCAGCTTTGAAAGTAGATGCACTCTTTGGGGTGATGGGCCAATAGTTTGGTTCTTAACAAACAAGGAAGAGGCCACATTCCGCCGTAAAGGACGAGTCTCGTCGAGAAACACGACAGTCGTACGCGAACACCTGGACCAGCGTATCGGTTTGTGGTATATTGCTGACCAATCTAATGCTATTCAAAGTGACTGCTAACGATTCGGAAGCGTCTTAGTACGGGAGCTGTAATTAGGGTCTCTCCGCGCCAGGTCTGCAAATGTGACCACGAAGTTTCATGCTTTTATAGTTAC",

"GGCACCCGTACGCAGCTAACTTTTAGCCCAAGAACGTAGTCTGTACGTCGAGTCTGTCCGCGTAAGTTTTCATACTTGCGACATTAGCGACAGCGGTACCAAGGTCCTATTCGCAATCGCGTGGAAGGGCACTACCCGCGCGGCTTGTTCTTCTATGATCGGGGAGTGGAGAGACTACGTTGCCGATTATTCGTGACCTTTGCGCTTGATCCACTGGCGTGAGTCTTTGTTAAGCTAACCCGCAATCACGTTTCGGATATTCAAGGAAGCACAGCAAAACATTGAAGGCTTGAGAAAGGAACACACAGGAGTAACTATA",

"GCTCTCCGTAATGCAACATAGATGCTGCATCTAGTTGTTATCCGCTCAGTTCTGACCTTATGGGCACCCCATATCATCACCCTAGCCGAGAGATCAACCCGGCTTCGTCCAGGTTTGGCGCCACATCAAGACGAACATACTCATTGATTACACCGAAGGAAGAGCCTTTCCAGAGGTGGGACACGTTTGTGGAGAAGAGGAGAATGTCATAGTATAGGAATTGGAGCAACGAGACGACCCCGCGTGACCCCCGGCAACCCTAAAAGGGGTATATTACAAGCCGGCTAAAGAATATGCTTCCCTGTCGTCACTCCCCGTC",

"AATGCGACAGCAACATGGCGATGTATGACTTTGGTACCAAATTGAATGCAGATCATCCTCGTCCTCTGCTCGAGCCGCAGTCAGGACATCTACCAATTCCGCTAGCTACGAGAAAATGTCCGAAAAGGGCACAGAGTCGCTCTGCTGGTCAGTGACCCACGATCACCTTGTGGAGAAGAAGACTTGTCGCATAAGCATTCCCGACTGTGTATGCGAGTTGGGTTCACGGTGCCGATCCGATGTCTAGGTCCGTTCCTGCTGCGCCTTCCTCAGTGGATGTCCGTTGGCCGGGATTCGCGATTCCCGGGCGTGGTACCAA",

"AACGGATACGAAGGAAGCGCGGGTGGCAAACAAGGCCTCCCACACACGTCCATTTAGCTATACCCAGCCATGGACGTTTGATGCAGTATGTGATCGAGGCCGTTTTTACCACAGATCGTACATGTGCCGTCGTCTCAAGCGGCTCCCCTTACCAAGCGTTGCCGACTATAGCTCACATTCTTCCCGGCCGCATTCTCAGCTCCGCGTCCTTGTATAAAGTAGGCGGGCTTTGTGGGGTTTGTGGAGCATGATAGAACGTCCGACGTATCGAGTACGTGGCGTATAGCTCGCAATAGACCGATCTGAAGTTTCACGTGCC",

"CTACTGCACCACACCAGGAACGTATGCTTCCAGCGTATAACCCGTACCGTGGCTGGATACTGACGGGGCGGCGTTGTCTTGAGAGTCTAGCCCAGAGAGCGCGCAACGTTCTTAGCAACGCGTGGCATCGCAGCTTTGCCTGGACCGCTCGACGGTGTGAGACACCCTTCAGGGTGCGGGAAATCGTTTCACCAGTGGTCACGAAAATATCAGGCATCGGGCAGAAGGTGTGGCCTTCGATTTGGCGGATGAAAGGGATAATACAGATCACATTGTGGAGGGATACATACCTGCGCCGCTAAATGTGGTCGTCCGCCTA",

"CCTGAGCGGTCTAATTATCGCCATCATGCTCGTACGAATCCATTTCGTTTTTGTTCCGGAGAGTTCAACGGATTTGACACTCGAGATAGACTCAGATCTAGGCATAGGTGATCGCAATGTGGAGATCCTCTTCCCCGCCTCGGGGTTAAGTTACATGGCGTCACACTTTCAATAGATTTCAGCCACCGGGGTATACCCCGTAGCGTAGCAACAACAACTAATACCGCCGCAAGAATCACTGTAAGGTTGTCTACCTATCAATCGCCTGACGCGTTGGCGGACCTTAGGAGGCATATTCTTCGACTCGGCAACTTCTTCC",

"AGTCATGTAGCGCACGTTACTGCGCGCTCATGCGCGCGACAGAATGCCACCAACCTCGGTCATTTTAAAGGCTCGTCGTCTTACTTTCCCTCACCCTTGCTGCAAATGCGAGAGTTTCAGGGGCTCTTCGCCCTAGGTAGCGTGTGCAAAGGTGCTTTAGGTCGTTCGACGTAGTTACCAACTCTTATGCGTTGAGCATAAATGTCCGAGGAGCTAGCAGCTGAATGCATAAAACCTAACTGGATTGTTTTTCAGGCTGCTAGCTTGTGACCTACCACGACCGGATCGGAGAGTGGAGTACACCTAATACTACTGCTTT",

"TGCGCCTGAGCTGCTAAGGGTCGCACTAGTAGAAAGCACACGTTGAAAAGCTCTCCCGAGGATAGTATCAAAAGCAGTGGCGTAATCTTAGTGTTCATGCAGGAGCTTCTCTTCCAGTAGGCTTCATGGTAACGTTAGGGCATTGTGCATGATACGACGAGAATGACCATGTGCAGAACAGCCTGTGGTCTGGGGACGCAGGCGGTCTAGGCCCCCCGGTAAAATGCTAATATAGGTGTTGAGGCACGAGGAGGGATCGGTTTCGTGAGACGCTTCGAGATGCTATTAGAAACAGGACTACGCAGGCTAGAACACGCGT",

"GAAAAATCACCCTCAGGCCCCAGTTCCAAACATGTACCTTGAGGACCGCAACATATCTATGTAGAGAAGCGGTTGCAAACCGCAGCGTGCCTCGGTTTGTGGATCACGACCTCGAGATAGTATGAACAAGCGGCATCGGGGTCGAATCACTATGTATCAAACGAACTTGCAACTCAGAAGAAGACCGGACGTGGCATTAGCTCTTCGATCCTCCAGGACTGGGGGCGCCTAGGTCATGCCGTGGTGAATCAATGTCTTAGGATTCTAGGAGCCTTAAACTCGCTGCCAACTCTTGGCGCATTGCGTACTAATGTGATCC",

"CCTGGGAGCTACGACAATGTGCGCCAGGTGGGAGGCCGCAGGGAATGCTGTCGGTTTGCTCCTGCTAGGACAGATGAAGCTGTCCACGTTGTACAAGGCAAGTAGCTGTGAAAGTCTTGGGTTGCTGTAACCCATCTACCGAGGCGCTAACCGATTCAACTACCTAATTGTTTAGGGATATTTTCGCGCCGCATCGCCCTTGGCAAGCTGTCCGGCCAAGGTTTGAAACCTCGCCATTCATTGAGAGGTCTTAAGCTCCATGTTAAGAATCGTGGGGTCGATCGGTTTGACAAGCTGGCTAAAGGCTATTAGGAATCAA",

"AGTGCTCTCCCCGAGCTAGTAAATACGCCAACGCTATTCCGAATTTGCGCGTTCTGGCTCGTCATGTTAATTGGAGGAAGAAAATGTGTATTTATCCTCTTACTCTTTACACTAAAAGTTTAACGCCCATCAACATGAGGCGTACACCCACGTTACTATGTGTCTGTGTACAAACTGGCCGTACGCATCGAGACCGCATGGCTCGTTTGTAGCAGAGTACGTGGGGAAGCAGGAAAGTGGATACCGTAGAGGCGGTTACTCTCATTAAGGCCTAGGTGTCCAGACGGTTTGTGGAGGGACCTGAATGCGCTTCGATTAA"]

Dna = [
    "GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC",
    "CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG",
    "ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC",
    "GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC",
    "GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG",
    "CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA",
    "GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA",
    "GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG",
    "GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG",
    "TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC"
]


def OneGibbsSampler(Dna, k, t, N):
    l = len(Dna[0])
    m = [random.randint(0, l - k) for _ in range(t)]
    motifs = [Dna[i][m[i]:m[i] + k] for i in range(t)]
    best_motifs = list(motifs)
    best_motifs_score = PseudoScore(best_motifs)

    for j in range(N):
        hide_number = random.randint(0, t - 1)
        hided_profile = PseudoProfile([motif for index, motif in
                                 enumerate(motifs) if index != hide_number])
        motifs[hide_number] = profile_most_probable_pattern(Dna[hide_number], hided_profile)
        motifs_score = PseudoScore(motifs)
        if motifs_score < best_motifs_score:
            best_motifs_score = motifs_score
            best_motifs = motifs
    return best_motifs_score, best_motifs

def GibbsSampler(Dna, k, t, N):
    best_motifs_score = k*t
    best_motifs = None

    for repeat in range(20):
        bms, bm = OneGibbsSampler(Dna, k, t, N)
        if bms < best_motifs_score:
            best_motifs = bm
            best_motifs_score = bms
    return best_motifs










    # hide one random Text from Dna






# Random Number Generator

distribution = [0.1, 0.2, 0.3]
def Random(distribution):
    # check if sum = 1
    l = len(distribution)
    new_distribution = []
    Sum = sum(distribution)
    for p in distribution:
        new_distribution.append(p/Sum)

    # make population list
    candidates = []
    for i in range(l):
        candidates.append(i)

    Random_number = random.choices(population = candidates,
                                   weights = new_distribution,
                                   k = 10)
    return Random_number

def PseudoCount(Motifs):
    # returns a dictionary "count"
    count = {}
    k = len(Motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(1)
    t = len(Motifs)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1
    return count


def PseudoProfile(Motifs):
    # returns a dictionary "profile"
    t = len(Motifs)
    k = len(Motifs[0])
    profile = {}
    profile = PseudoCount(Motifs)
    for symbol in 'ACGT':
        for j in range(k):
            profile[symbol][j] = profile[symbol][j] / float(t+4)
    return profile


def PseudoConsensus(Motifs):
    k = len(Motifs[0])
    counts = PseudoCount(Motifs)
    consensus = ""
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if counts[symbol][j] > m:
                m = counts[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol
    return consensus


def PseudoScore(Motifs):
    profile = PseudoCount(Motifs)
    Consensus = PseudoConsensus(Motifs)
    t = len(Motifs)
    score = 0
    for i in range(len(Motifs[0])):
        score = score + (t - profile[Consensus[i]][i])
    return score

def pr(Text, Profile):
    pr = 1
    for i in range(len(Text)):
        pr = pr * Profile[Text[i]][i]
    return pr

def profile_most_probable_pattern(Text, Profile):
    T = len(Text)
    K = len(Profile['A'])
    prob = 0
    x = Text[0:K]
    for i in range(T - K + 1):
        Subtext = Text[i:i + K]
        temp_prob = pr(Subtext, Profile)
        if temp_prob > prob:
            prob = temp_prob
            x = Subtext
    return x

for poops in GibbsSampler(Dna, k, t, N):
    print(poops)
#print(OneGibbsSampler(Dna, k, t, N))